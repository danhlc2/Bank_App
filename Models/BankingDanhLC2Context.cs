// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Banking_Application.Models
{
    public partial class BankingDanhLC2Context : DbContext
    {
        public BankingDanhLC2Context()
        {
        }

        public BankingDanhLC2Context(DbContextOptions<BankingDanhLC2Context> options)
            : base(options)
        {
        }

        public virtual DbSet<AdminTable> AdminTable { get; set; }
        public virtual DbSet<Debit> Debit { get; set; }
        public virtual DbSet<Deposit> Deposit { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Fd> Fd { get; set; }
        public virtual DbSet<Transfer> Transfer { get; set; }
        public virtual DbSet<UserAccount> UserAccount { get; set; }
        public virtual DbSet<UserTable> UserTable { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=BLACKMSI;Initial Catalog=BankingDanhLC2;Persist Security Info=True;User ID=thienvx;Password=admin");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AdminTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Admin_Table");

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.Username).HasMaxLength(500);
            });

            modelBuilder.Entity<Debit>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DebAmount).HasColumnType("money");

                entity.Property(e => e.Mode).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.OldBalance).HasColumnType("money");

                entity.Property(e => e.Sno).HasColumnName("sno");
            });

            modelBuilder.Entity<Deposit>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DipAmount).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Mode).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.OldBalance).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Sno).HasColumnName("sno");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasMaxLength(500);

                entity.Property(e => e.EmpName)
                    .HasColumnName("Emp_name")
                    .HasMaxLength(500);

                entity.Property(e => e.Gender).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.Username).HasMaxLength(500);
            });

            modelBuilder.Entity<Fd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FD");

                entity.Property(e => e.AccountNo)
                    .HasColumnName("Account_No")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.InterestRate)
                    .HasColumnName("Interest_rate")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MaturityAmount)
                    .HasColumnName("Maturity_Amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.MaturityDate)
                    .HasColumnName("Maturity_Date")
                    .HasMaxLength(500);

                entity.Property(e => e.Mode).HasMaxLength(500);

                entity.Property(e => e.Rupees).HasMaxLength(500);

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Transfer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountNo)
                    .HasColumnName("Account_No")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Balance)
                    .HasColumnName("balance")
                    .HasColumnType("money");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.ToTransfer).HasColumnType("money");
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("userAccount");

                entity.Property(e => e.AccountNo)
                    .HasColumnName("Account_No")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Balance)
                    .HasColumnName("balance")
                    .HasColumnType("money");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.District).HasMaxLength(500);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasMaxLength(500);

                entity.Property(e => e.FatherName)
                    .HasColumnName("Father_Name")
                    .HasMaxLength(500);

                entity.Property(e => e.Gender).HasMaxLength(500);

                entity.Property(e => e.MaritialStatus)
                    .HasColumnName("maritial_status")
                    .HasMaxLength(500);

                entity.Property(e => e.MotherName)
                    .HasColumnName("Mother_Name")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.PhoneNo).HasMaxLength(500);

                entity.Property(e => e.Picture).HasMaxLength(1024);

                entity.Property(e => e.State).HasMaxLength(500);
            });

            modelBuilder.Entity<UserTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("userTable");

                entity.Property(e => e.Password).HasMaxLength(500);

                entity.Property(e => e.UserName).HasMaxLength(500);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}